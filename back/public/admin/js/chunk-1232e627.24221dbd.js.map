{"version":3,"sources":["webpack:///./src/interfaces/checkboxes-relational/input.vue?d65f","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js","webpack:///./src/interfaces/checkboxes-relational/input.vue?b100","webpack:///src/interfaces/checkboxes-relational/input.vue","webpack:///./src/interfaces/checkboxes-relational/input.vue?94f2","webpack:///./src/interfaces/checkboxes-relational/input.vue"],"names":["module","exports","props","id","type","String","required","name","value","default","length","Number","readonly","Boolean","collection","options","Object","newItem","relation","fields","values","width","val","includes","render","_vm","this","_h","$createElement","_c","_self","staticClass","_l","item","key","style","flexBasis","grid","attrs","uid","relatedPk","labelRendered","selection","on","$event","onSelection","staticRenderFns","mixins","data","items","unchecked","computed","_","find","primary_key","junctionFieldOfRelated","junction","field_many","field","junctionPk","collection_many","created","getItems","map","methods","$helpers","shortid","generate","$api","then","template","micromustache","splice","index","removeItem","push","addItem","prepareItem","forEach","$delete","itemId","isSet","newValue","uncheckedItem","$emit","component"],"mappings":"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","file":"js/chunk-1232e627.24221dbd.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=style&index=0&lang=scss&\"","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    },\n    width: {\n      type: String,\n      default: null,\n      validator(val) {\n        return [\n          'half',\n          'half-left',\n          'half-right',\n          'full',\n          'fill'\n        ].includes(val);\n      }\n    }\n  }\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"interface-checkbox-relational subgrid\"},_vm._l((_vm.items),function(item){return _c('v-checkbox',{key:(\"checkbox_relational_\" + (item.id)),style:({ flexBasis: 100 / (_vm.options.grid || 1) + '%' }),attrs:{\"id\":_vm.uid(item),\"value\":item[_vm.relatedPk],\"disabled\":_vm.readonly,\"label\":_vm.labelRendered(item),\"checked\":_vm.selection.includes(item[_vm.relatedPk])},on:{\"change\":function($event){return _vm.onSelection(item.id)}}})}),1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"interface-checkbox-relational subgrid\">\n    <v-checkbox\n      v-for=\"item in items\"\n      :id=\"uid(item)\"\n      :key=\"`checkbox_relational_${item.id}`\"\n      :style=\"{ flexBasis: 100 / (options.grid || 1) + '%' }\"\n      :value=\"item[relatedPk]\"\n      :disabled=\"readonly\"\n      :label=\"labelRendered(item)\"\n      :checked=\"selection.includes(item[relatedPk])\"\n      @change=\"onSelection(item.id)\"\n    ></v-checkbox>\n  </div>\n</template>\n\n<script>\nimport mixin from \"@directus/extension-toolkit/mixins/interface\";\n\nexport default {\n  name: \"InterfaceCheckboxesRelational\",\n  mixins: [mixin],\n  data() {\n    return {\n      items: [],\n      selection: [],\n      unchecked: {}\n    };\n  },\n\n  computed: {\n    //The primary key of related table\n    relatedPk() {\n      let fields = this.relation.junction.collection_one.fields;\n      return _.find(fields, {\n        primary_key: true\n      }).field;\n    },\n\n    //The column name of junction table in ref to related table\n    junctionFieldOfRelated() {\n      return this.relation.junction.field_many.field;\n    },\n\n    //Junction Table Primary Key\n    //? In normal case it would be \"ID\" only!\n    junctionPk() {\n      return _.find(this.relation.collection_many.fields, {\n        primary_key: true\n      }).field;\n    }\n  },\n  created() {\n    //Get all the items\n    this.getItems();\n\n    //Select the items\n    if (!this.newItem) {\n      this.selection = this.value.map(item => item[this.junctionFieldOfRelated][this.relatedPk]);\n    }\n  },\n\n  methods: {\n    uid(item) {\n      return this.$helpers.shortid.generate() + \"_\" + item.id;\n    },\n\n    // Get items to render the checkboxes\n    getItems() {\n      //Get the collection name of the related table\n      let collection = this.relation.junction.collection_one.collection;\n\n      this.$api.getItems(collection, {}).then(res => {\n        this.items = res.data;\n      });\n    },\n\n    labelRendered(item) {\n      if (this.options.template) {\n        return this.$helpers.micromustache.render(this.options.template, item);\n      } else {\n        return this.item[this.relatedPk];\n      }\n    },\n\n    //When checkbox is clicked\n    onSelection(val) {\n      let item = this.items.filter(item => item[this.relatedPk] == val)[0];\n      if (this.selection.includes(val)) {\n        let index = this.selection.indexOf(val);\n        this.selection.splice(index, 1);\n        this.removeItem(val);\n      } else {\n        this.selection.push(val);\n        this.addItem(val, item);\n      }\n    },\n\n    prepareItem(item) {\n      return { [this.junctionFieldOfRelated]: { [this.relatedPk]: item[this.relatedPk] } };\n    },\n\n    /**\n     * Adds a new item to junction table\n     */\n    addItem(val, item) {\n      let newValue = [];\n      let isSet = false;\n      //If the value is set\n      //We check throug items if the selected is same.\n      if (this.value) {\n        this.value.forEach(item => {\n          //If the item is deleted\n          //Restore the value from unchecked array\n          if (item.$delete) {\n            let uncheckedItem = this.unchecked[item[this.junctionPk]];\n            let itemId = uncheckedItem[this.junctionFieldOfRelated][this.relatedPk];\n            if (itemId == val) {\n              isSet = true;\n              newValue.push(uncheckedItem);\n              delete this.unchecked[item[this.junctionPk]];\n            } else {\n              newValue.push(item);\n            }\n          } else {\n            newValue.push(item);\n          }\n        });\n      }\n      if (!isSet) {\n        newValue.push(this.prepareItem(item));\n      }\n      //newValue.push({ [this.junctionFieldOfRelated]: newItem });\n      this.$emit(\"input\", newValue);\n    },\n\n    removeItem(val) {\n      let newValue = [];\n      //Loop through existing value to find an item\n      //Set $delete key to true\n      this.value.forEach(item => {\n        if (!item.$delete && item[this.junctionFieldOfRelated][this.relatedPk] == val) {\n          //Keep the item in seperate array\n          // to restore the value when checked again\n          if (item[this.junctionPk]) {\n            this.unchecked[item[this.junctionPk]] = item;\n            newValue.push({\n              [this.junctionPk]: item[this.junctionPk],\n              $delete: true\n            });\n          }\n        } else {\n          newValue.push(item);\n        }\n      });\n\n      this.$emit(\"input\", newValue);\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.interface-checkbox-relational {\n  padding-top: calc(\n    (var(--input-height) - 24px) / 2\n  ); // [input height] - 24px (icon height) / 2 (top padding)\n\n  .form-checkbox {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./input.vue?vue&type=template&id=3ac4241f&\"\nimport script from \"./input.vue?vue&type=script&lang=js&\"\nexport * from \"./input.vue?vue&type=script&lang=js&\"\nimport style0 from \"./input.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}